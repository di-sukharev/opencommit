import {
  ChatCompletionRequestMessage,
  ChatCompletionRequestMessageRoleEnum
} from 'openai';

import { note } from '@clack/prompts';

import { getConfig } from './commands/config';
import { i18n, I18nLocals } from './i18n';
import { configureCommitlintIntegration } from './modules/commitlint/config';
import { commitlintPrompts } from './modules/commitlint/prompts';
import { ConsistencyPrompt } from './modules/commitlint/types';
import * as utils from './modules/commitlint/utils';
import { removeConventionalCommitWord } from './utils/removeConventionalCommitWord';

const config = getConfig();
const translation = i18n[(config?.OCO_LANGUAGE as I18nLocals) || 'en'];

export const IDENTITY =
  'You are to act as the author of a commit message in git.';

const INIT_MAIN_PROMPT = (
  language: string,
  fullGitMojiSpec: boolean
): ChatCompletionRequestMessage => ({
  role: ChatCompletionRequestMessageRoleEnum.System,
  content: `${IDENTITY} Your mission is to create clean and comprehensive commit messages as per the ${
    fullGitMojiSpec ? 'GitMoji specification' : 'conventional commit convention'
  } and explain WHAT were the changes and mainly WHY the changes were done. I'll send you an output of 'git diff --staged' command, and you are to convert it into a commit message.
  ${
    config?.OCO_EMOJI
      ? 'Use GitMoji convention to preface the commit. Here are some help to choose the right emoji (emoji, description): ' +
        'üêõ, Fix a bug; ' +
        '‚ú®, Introduce new features; ' +
        'üìù, Add or update documentation; ' +
        'üöÄ, Deploy stuff; ' +
        '‚úÖ, Add, update, or pass tests; ' +
        '‚ôªÔ∏è, Refactor code; ' +
        '‚¨ÜÔ∏è, Upgrade dependencies; ' +
        'üîß, Add or update configuration files; ' +
        'üåê, Internationalization and localization; ' +
        'üí°, Add or update comments in source code; ' +
        `${
          fullGitMojiSpec
            ? 'üé®, Improve structure / format of the code; ' +
              '‚ö°Ô∏è, Improve performance; ' +
              'üî•, Remove code or files; ' +
              'üöëÔ∏è, Critical hotfix; ' +
              'üíÑ, Add or update the UI and style files; ' +
              'üéâ, Begin a project; ' +
              'üîíÔ∏è, Fix security issues; ' +
              'üîê, Add or update secrets; ' +
              'üîñ, Release / Version tags; ' +
              'üö®, Fix compiler / linter warnings; ' +
              'üöß, Work in progress; ' +
              'üíö, Fix CI Build; ' +
              '‚¨áÔ∏è, Downgrade dependencies; ' +
              'üìå, Pin dependencies to specific versions; ' +
              'üë∑, Add or update CI build system; ' +
              'üìà, Add or update analytics or track code; ' +
              '‚ûï, Add a dependency; ' +
              '‚ûñ, Remove a dependency; ' +
              'üî®, Add or update development scripts; ' +
              '‚úèÔ∏è, Fix typos; ' +
              'üí©, Write bad code that needs to be improved; ' +
              '‚è™Ô∏è, Revert changes; ' +
              'üîÄ, Merge branches; ' +
              'üì¶Ô∏è, Add or update compiled files or packages; ' +
              'üëΩÔ∏è, Update code due to external API changes; ' +
              'üöö, Move or rename resources (e.g.: files, paths, routes); ' +
              'üìÑ, Add or update license; ' +
              'üí•, Introduce breaking changes; ' +
              'üç±, Add or update assets; ' +
              '‚ôøÔ∏è, Improve accessibility; ' +
              'üçª, Write code drunkenly; ' +
              'üí¨, Add or update text and literals; ' +
              'üóÉÔ∏è, Perform database related changes; ' +
              'üîä, Add or update logs; ' +
              'üîá, Remove logs; ' +
              'üë•, Add or update contributor(s); ' +
              'üö∏, Improve user experience / usability; ' +
              'üèóÔ∏è, Make architectural changes; ' +
              'üì±, Work on responsive design; ' +
              'ü§°, Mock things; ' +
              'ü•ö, Add or update an easter egg; ' +
              'üôà, Add or update a .gitignore file; ' +
              'üì∏, Add or update snapshots; ' +
              '‚öóÔ∏è, Perform experiments; ' +
              'üîçÔ∏è, Improve SEO; ' +
              'üè∑Ô∏è, Add or update types; ' +
              'üå±, Add or update seed files; ' +
              'üö©, Add, update, or remove feature flags; ' +
              'ü•Ö, Catch errors; ' +
              'üí´, Add or update animations and transitions; ' +
              'üóëÔ∏è, Deprecate code that needs to be cleaned up; ' +
              'üõÇ, Work on code related to authorization, roles and permissions; ' +
              'ü©π, Simple fix for a non-critical issue; ' +
              'üßê, Data exploration/inspection; ' +
              '‚ö∞Ô∏è, Remove dead code; ' +
              'üß™, Add a failing test; ' +
              'üëî, Add or update business logic; ' +
              'ü©∫, Add or update healthcheck; ' +
              'üß±, Infrastructure related changes; ' +
              'üßë‚Äçüíª, Improve developer experience; ' +
              'üí∏, Add sponsorships or money related infrastructure; ' +
              'üßµ, Add or update code related to multithreading or concurrency; ' +
              'ü¶∫, Add or update code related to validation.'
            : ''
        }`
      : 'Do not preface the commit with anything. Conventional commit keywords:' +
        'fix, feat, build, chore, ci, docs, style, refactor, perf, test.'
  }  
    ${
      config?.OCO_DESCRIPTION
        ? 'Add a short description of WHY the changes are done after the commit message. Don\'t start it with "This commit", just describe the changes.'
        : "Don't add any descriptions to the commit, only commit message."
    }
    ${
      config?.OCO_ONE_LINE_COMMIT
        ? 'Craft a concise commit message that encapsulates all changes made, with an emphasis on the primary updates. If the modifications share a common theme or scope, mention it succinctly; otherwise, leave the scope out to maintain focus. The goal is to provide a clear and unified overview of the changes in a one single message, without diverging into a list of commit per file change.'
        : ""
    }
    Use the present tense. Lines must not be longer than 74 characters. Use ${language} for the commit message.`
});

export const INIT_DIFF_PROMPT: ChatCompletionRequestMessage = {
  role: ChatCompletionRequestMessageRoleEnum.User,
  content: `diff --git a/src/server.ts b/src/server.ts
    index ad4db42..f3b18a9 100644
    --- a/src/server.ts
    +++ b/src/server.ts
    @@ -10,7 +10,7 @@
    import {
        initWinstonLogger();
        
        const app = express();
        -const port = 7799;
        +const PORT = 7799;
        
        app.use(express.json());
        
        @@ -34,6 +34,6 @@
        app.use((_, res, next) => {
            // ROUTES
            app.use(PROTECTED_ROUTER_URL, protectedRouter);
            
            -app.listen(port, () => {
                -  console.log(\`Server listening on port \${port}\`);
                +app.listen(process.env.PORT || PORT, () => {
                    +  console.log(\`Server listening on port \${PORT}\`);
                });`
};

const INIT_CONSISTENCY_PROMPT = (
  translation: ConsistencyPrompt
): ChatCompletionRequestMessage => ({
  role: ChatCompletionRequestMessageRoleEnum.Assistant,
  content: `${
    config?.OCO_EMOJI
      ? `üêõ ${removeConventionalCommitWord(translation.commitFix)}`
      : translation.commitFix
  }
${
  config?.OCO_EMOJI
    ? `‚ú® ${removeConventionalCommitWord(translation.commitFeat)}`
    : translation.commitFeat
}
${config?.OCO_DESCRIPTION ? translation.commitDescription : ''}`
});

export const getMainCommitPrompt = async (
  fullGitMojiSpec: boolean
): Promise<ChatCompletionRequestMessage[]> => {
  switch (config?.OCO_PROMPT_MODULE) {
    case '@commitlint':
      if (!(await utils.commitlintLLMConfigExists())) {
        note(
          `OCO_PROMPT_MODULE is @commitlint but you haven't generated consistency for this project yet.`
        );
        await configureCommitlintIntegration();
      }

      // Replace example prompt with a prompt that's generated by OpenAI for the commitlint config.
      const commitLintConfig = await utils.getCommitlintLLMConfig();

      return [
        commitlintPrompts.INIT_MAIN_PROMPT(
          translation.localLanguage,
          commitLintConfig.prompts
        ),
        INIT_DIFF_PROMPT,
        INIT_CONSISTENCY_PROMPT(
          commitLintConfig.consistency[
            translation.localLanguage
          ] as ConsistencyPrompt
        )
      ];

    default:
      // conventional-commit
      return [
        INIT_MAIN_PROMPT(translation.localLanguage, fullGitMojiSpec),
        INIT_DIFF_PROMPT,
        INIT_CONSISTENCY_PROMPT(translation)
      ];
  }
};
